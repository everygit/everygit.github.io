(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{363:function(t,e,v){"use strict";v.r(e);var _=v(45),l=Object(_.a)({},(function(){var t=this,e=t.$createElement,v=t._self._c||e;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("h1",{attrs:{id:"概述"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[t._v("#")]),t._v(" 概述")]),t._v(" "),v("p",[t._v("TypeScript 的类型系统非常强大，因为它允许用其他类型来表示类型。")]),t._v(" "),v("p",[t._v("这种思想最简单的形式是泛型，我们实际上有各种各样的类型操作符可用。也可以用我们已有的值来表示类型。")]),t._v(" "),v("p",[t._v("我们将介绍用现有类型或值表示新类型的方法。")]),t._v(" "),v("ul",[v("li",[t._v("泛型 通过接受类型创建新的类型")]),t._v(" "),v("li",[t._v("keyof 类型操作符 使用 keyof 创建新的类型")]),t._v(" "),v("li",[t._v("typeof 通过 typeof 创建新的类型")]),t._v(" "),v("li",[t._v("索引访问类型 通过 Type['a'] 语法获取类型的子集")]),t._v(" "),v("li",[t._v("条件类型 通过条件语句获取新的类型")]),t._v(" "),v("li",[t._v("映射类型 通过映射现有类型中的每个属性来创建类型")]),t._v(" "),v("li",[t._v("模板字符串类型 通过模板字面值字符串更改属性的映射类型")])])])}),[],!1,null,null,null);e.default=l.exports}}]);