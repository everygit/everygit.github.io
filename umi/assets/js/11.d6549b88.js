(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{365:function(t,s,n){"use strict";n.r(s);var e=n(42),a=Object(e.a)({},(function(){var t=this.$createElement,s=this._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":this.$parent.slotKey}},[s("h1",{attrs:{id:"目录结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#目录结构"}},[this._v("#")]),this._v(" 目录结构")]),this._v(" "),s("p",[this._v("脚手架刚创建的时候，并没有那么的全，只有最进本的路由相关的目录和文件")]),this._v(" "),s("div",{staticClass:"language- extra-class"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[this._v(".\n├── config\n    ├── config.ts // 配置文件\n    └── router.ts // 路由可以拆分出来\n├── mock\n    └── api.ts // 数据模拟\n├── package.json\n├── public\n├── README.md\n├── src\n    ├── .umi // 自动生成，别管它\n    ├── pages // 页面目录\n    ├── models // dva\n    ├── services // 接口\n    └── utils\n├── .umirc.ts // 配置文件，优先级比 config 高\n├── .env // 环境变量\n├── tsconfig.json\n├── typings.d.ts\n└── package.json\n")])])])])}),[],!1,null,null,null);s.default=a.exports}}]);