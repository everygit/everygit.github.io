(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{359:function(e,t,r){"use strict";r.r(t);var s=r(42),a=Object(s.a)({},(function(){var e=this,t=e.$createElement,r=e._self._c||t;return r("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[r("h1",{attrs:{id:"cache"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cache"}},[e._v("#")]),e._v(" Cache")]),e._v(" "),r("p",[e._v("Cache 接口为缓存的 Request / Response  对象对提供存储机制，例如，作为ServiceWorker 生命周期的一部分。请注意，Cache 接口像 workers 一样，是暴露在 window 作用域下的。尽管它被定义在 service worker 的标准中,  但是它不必一定要配合 service worker 使用.")]),e._v(" "),r("p",[e._v("一个域可以有多个命名 Cache 对象。你需要在你的脚本 (例如，在 ServiceWorker 中)中处理缓存更新的方式。除非明确地更新缓存，否则缓存将不会被更新；除非删除，否则缓存数据不会过期。使用 CacheStorage.open(cacheName) 打开一个Cache 对象，再使用 Cache 对象的方法去处理缓存.")]),e._v(" "),r("p",[e._v("你需要定期地清理缓存条目，因为每个浏览器都硬性限制了一个域下缓存数据的大小。缓存配额使用估算值，可以使用 StorageEstimate API 获得。浏览器尽其所能去管理磁盘空间，但它有可能删除一个域下的缓存数据。浏览器要么自动删除特定域的全部缓存，要么全部保留。确保按名称安装版本缓存，并仅从可以安全操作的脚本版本中使用缓存。查看 Deleting old caches 获取更多信息.")]),e._v(" "),r("h2",{attrs:{id:"方法"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),r("table",[r("thead",[r("tr",[r("th",[e._v("名称")]),e._v(" "),r("th",[e._v("描述")])])]),e._v(" "),r("tbody",[r("tr",[r("td",[e._v("Cache.match(request, options)")]),e._v(" "),r("td",[e._v("返回一个 Promise对象，resolve的结果是跟 Cache 对象匹配的第一个已经缓存的请求。")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.matchAll(request, options)")]),e._v(" "),r("td",[e._v("返回一个Promise 对象，resolve的结果是跟Cache对象匹配的所有请求组成的数组。")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.add(request)")]),e._v(" "),r("td",[e._v("抓取这个URL, 检索并把返回的response对象添加到给定的Cache对象.这在功能上等同于调用 fetch()")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.addAll(requests)")]),e._v(" "),r("td",[e._v("抓取一个URL数组，检索并把返回的response对象添加到给定的Cache对象。")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.put(request, response)")]),e._v(" "),r("td",[e._v("同时抓取一个请求及其响应，并将其添加到给定的cache。")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.delete(request, options)")]),e._v(" "),r("td",[e._v("搜索key值为request的Cache 条目。如果找到，则删除该Cache 条目，并且返回一个resolve为true的Promise对象；如果未找到，则返回一个resolve为false的Promise对象。")])]),e._v(" "),r("tr",[r("td",[e._v("Cache.keys(request, options)")]),e._v(" "),r("td",[e._v("返回一个Promise对象，resolve的结果是Cache对象key值组成的数组。")])])])])])}),[],!1,null,null,null);t.default=a.exports}}]);