(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{365:function(e,a,t){"use strict";t.r(a);var r=t(42),c=Object(r.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"cachestorage"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#cachestorage"}},[e._v("#")]),e._v(" CacheStorage")]),e._v(" "),t("p",[e._v("CacheStorage 接口表示 Cache 对象的存储。它提供了一个 ServiceWorker 、其它类型worker或者 window 范围内可以访问到的所有命名cache的主目录（它并不是一定要和service workers一起使用，即使它是在service workers规范中定义的），并维护一份字符串名称到相应 Cache 对象的映射。")]),e._v(" "),t("p",[e._v("CacheStorage  同样暴露了 CacheStorage.open() 和 CacheStorage.match()方法。使用 CacheStorage.open() 获取 Cache 实例。使用 CacheStorage.match() 检查给定的 Request 是否是 CacheStorage 对象跟踪的任何 Cache 对象中的键。")]),e._v(" "),t("p",[e._v("你可以通过 caches 属性访问 CacheStorage .")]),e._v(" "),t("h2",{attrs:{id:"方法"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#方法"}},[e._v("#")]),e._v(" 方法")]),e._v(" "),t("table",[t("thead",[t("tr",[t("th",[e._v("名称")]),e._v(" "),t("th",[e._v("描述")])])]),e._v(" "),t("tbody",[t("tr",[t("td",[e._v("CacheStorage.match()")]),e._v(" "),t("td",[e._v("检查给定的 Request 是否是 CacheStorage 对象跟踪的任何 Cache 对象的键，并返回一个resolve为该匹配的 Promise .")])]),e._v(" "),t("tr",[t("td",[e._v("CacheStorage.has()")]),e._v(" "),t("td",[e._v("如果存在与 cacheName 匹配的 Cache 对象，则返回一个resolve为true的 Promise .")])]),e._v(" "),t("tr",[t("td",[e._v("CacheStorage.open()")]),e._v(" "),t("td",[e._v("返回一个 Promise ，resolve为匹配  cacheName （如果不存在则创建一个新的cache）的 Cache 对象")])]),e._v(" "),t("tr",[t("td",[e._v("CacheStorage.delete()")]),e._v(" "),t("td",[e._v("查找匹配 cacheName 的 Cache 对象，如果找到，则删除 Cache 对象并返回一个resolve为true的 Promise 。如果没有找到 Cache 对象，则返回 false.")])]),e._v(" "),t("tr",[t("td",[e._v("CacheStorage.keys()")]),e._v(" "),t("td",[e._v("返回一个 Promise ，它将使用一个包含与 CacheStorage 追踪的所有命名 Cache 对象对应字符串的数组来resolve. 使用该方法迭代所有 Cache 对象的列表。")])])])])])}),[],!1,null,null,null);a.default=c.exports}}]);